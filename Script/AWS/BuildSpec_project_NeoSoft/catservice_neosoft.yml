version: 0.2

env: 
  variables: 
    AWS_DEFAULT_REGION: eu-central-1
    AWS_ACCOUNT_ID: 639962416620
    IMAGE_REPO_NAME: cartservice_neosoft
    REPOSITORY_URI: 639962416620.dkr.ecr.eu-central-1.amazonaws.com/catservice_neosoft
    EKS_KUBECTL_ROLE_ARN: arn:aws:iam::639962416620:role/EksCodeBuildKubectlRole
    EKS_CLUSTER_NAME: EKS_NeoSoft_Francfort
    
phases:
  install:
    runtime-versions:
      java: corretto8
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region eu-central-1 | docker login --username AWS --password-stdin 639962416620.dkr.ecr.eu-central-1.amazonaws.com
      # Docker Image Tag with Date Time & Code Buiild Resolved Source Version
      - TAG="$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      # Update Image tag in our Kubernetes Deployment Manifest        
      - echo "Update Image tag in kube-manifest..."
      - find buildspec.yml
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' buildspec.yml
      # Verify AWS CLI Version        
      - echo "Verify AWS CLI Version..."
      - aws --version
      # Login to ECR Registry for docker to push the image to ECR Repository
      - echo "Login in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email)
      # Update Kube config Home Directory
      - export KUBECONFIG=$HOME/.kube/config
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...          
      - docker build --tag $REPOSITORY_URI:$TAG .
      #- docker tag cartservice_neosoft:latest 639962416620.dkr.ecr.eu-central-1.amazonaws.com/cartservice_neosoft:latest
      
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker image...
      - docker push $REPOSITORY_URI:$TAG
      - echo "Docker Image Push to ECR Completed -  $REPOSITORY_URI:$TAG"

      # Extracting AWS Credential Information using STS Assume Role for kubectl
      - echo "Setting Environment Variables related to AWS CLI for Kube Config Setup"          
      - CREDENTIALS=$(aws sts assume-role --role-arn $EKS_KUBECTL_ROLE_ARN --role-session-name NeosoftGroupe2 --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')

      # Setup kubectl with our EKS Cluster              
      - echo "Update Kube Config"      
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME

       # Apply changes to our Application using kubectl
      - echo "Apply changes to kube manifests"            
      - kubectl apply -f kube-manifests/
      - echo "Completed applying changes to Kubernetes Objects"

      # Create Artifacts which we can use if we want to continue our pipeline for other stages
      
      - printf '[{"name":"buildspec.yml","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

artifacts:
  files: 
    - build.json   
    - kube-manifests/*
